name: Publish to NPM

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release (patch, minor, major)'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "20.x"
        registry-url: "https://registry.npmjs.org"
        cache: "npm"

    - name: Install dependencies
      run: npm ci

    - name: Update package.json version
      run: npm version ${{ github.event.inputs.release_type }} --no-git-tag-version

    - name: Build
      run: npm run build

    - name: Run tests
      run: npm test

    - name: Get new version
      id: get_version
      run: echo "new_version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

    - name: Commit version changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add package.json package-lock.json
        git commit -m "chore: bump version to ${{ steps.get_version.outputs.new_version }}"

    - name: Create and push tag
      run: |
        git tag v${{ steps.get_version.outputs.new_version }}
        git push origin v${{ steps.get_version.outputs.new_version }}

    - name: Push version changes
      run: git push

    - name: Publish to NPM
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Compute previous tag and release body
      id: compute_release_notes
      run: |
        git fetch --tags --force
        NEW_VER="v${{ steps.get_version.outputs.new_version }}"
        PREV_TAG="$(git tag --list 'v*' --sort=-version:refname | grep -v "^$NEW_VER$" | head -n1)"
        if [ -n "$PREV_TAG" ]; then
          BODY="Changes: https://github.com/${GITHUB_REPOSITORY}/compare/${PREV_TAG}...${NEW_VER}"
        else
          BODY="Initial release ${NEW_VER}"
        fi
        echo "previous_tag=$PREV_TAG" >> $GITHUB_OUTPUT
        {
          echo 'body<<EOF'
          echo "$BODY"
          echo 'EOF'
        } >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.new_version }}
        release_name: v${{ steps.get_version.outputs.new_version }}
        body: ${{ steps.compute_release_notes.outputs.body }}
        draft: false
        prerelease: false
